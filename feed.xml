<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spiraltechnology</title>
    <atom:link href="http://www.spiraltechnology.co.uk/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://www.spiraltechnology.co.uk</link>
    <description>simple, pragmatic, elegant code</description>
    <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Install phone gap apps on iPhone without developer account</title>
      <link>http://www.spiraltechnology.co.uk/articles/phonegap-ios-without-developer-account/</link>
      <pubDate>Sat, 18 Jan 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://www.spiraltechnology.co.uk/articles/phonegap-ios-without-developer-account/</guid>
      <author></author>
      <description>&lt;p&gt;How to build a phone gap app and deploy to your jailbroken iphone without signing up to Apple’s 99$ developer program.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I’ve had a few idea’s recently involving geolocation and wanted to rapidly prototype them to see if they are viable.
I’ve not touched objectiveC for about 4 years and didn’t really like coding in it or Xcode at the time (no doubt tooling
and test infrastructure has changed dramatically since then).&lt;/p&gt;
&lt;p&gt;Since the ideas do not have to be massively responsive, I thought I’d try out &lt;a href=&quot;http://phonegap.com/&quot;&gt;phonegap&lt;/a&gt; and write
the code as a small webapp. In theory it allows you to write a web app in javascript and html that gets bundled for ios and android devices without
having to write 2 versions.  If you have a mac you can build your application and use xcode to compile and test it with
xcode on an iphone simulator.  However, I wanted to see how the geolocation worked on a real iphone to see whether the idea
was feasible, and &lt;em&gt;being me&lt;/em&gt; didn’t want to pay $99 until I was sure I was going to start creating ios apps.&lt;/p&gt;
&lt;p&gt;The following steps were carried out on my Macbook running osx 10.8.5 (Mountain Lion), as far as I can tell they should
also work no problem with Lion and Mavericks, with my Jailbroken iPhone 4 (7.04).&lt;/p&gt;
&lt;p&gt;If you want to run unsigned code and not pay the $99 you will have to jailbreak your iphone.  This is &lt;a href=&quot;http://www.wired.co.uk/news/archive/2010-07/28/investigation-is-it-legal-to-jailbreak-a-uk-iphone&quot;&gt;legal&lt;/a&gt;
in the UK but might void your warranty.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install xcode. The quickest way to do this is to open the app store, search for xcode and select install, at the moment this is version 5.02
&lt;img src=&quot;http://www.spiraltechnology.co.uk/articles/phonegap-ios-without-developer-account/download-xcode.png&quot; alt=&quot;xcode install button&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install phonegap.
The latest versions have a requirement on node.js which can be either &lt;a href=&quot;http://nodejs.org/download&quot;&gt;downloaded&lt;/a&gt; or installed using &lt;a href=&quot;http://brew.sh/&quot;&gt;brew&lt;/a&gt;
Open a terminal and use npm to globally install phonegap.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; npm install -g phonegap&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If successful you should see something similar to the following&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/bin/phonegap -&amp;gt; /usr/local/lib/node_modules/phonegap/bin/phonegap.js
phonegap@3.3.0-0.18.1 /usr/local/lib/node_modules/phonegap
├── pluralize@0.0.4
├── colors@0.6.0-1
├── semver@1.1.0
├── qrcode-terminal@0.9.4
├── optimist@0.6.0 (wordwrap@0.0.2, minimist@0.0.5)
├── shelljs@0.1.4
├── prompt@0.2.11 (revalidator@0.1.6, pkginfo@0.3.0, read@1.0.5, utile@0.2.1, winston@0.6.2)
├── phonegap-build@0.8.4 (qrcode-terminal@0.8.0, optimist@0.3.7, shelljs@0.0.9, phonegap-build-api@0.3.3)
├── phonegap-soundwave@0.4.0 (home-dir@0.1.2, connect-inject@0.3.2, shelljs@0.2.6, request-progress@0.3.1, tar@0.1.19, node-static@0.7.0, request@2.33.0, connect@2.12.0)
└── cordova@3.3.0-0.1.1 (ncallbacks@1.0.0, colors@0.6.2, open@0.0.3, mime@1.2.11, q@0.9.7, follow-redirects@0.0.3, glob@3.2.8, shelljs@0.1.2, tar@0.1.19, lodash@2.4.1, prompt@0.2.7, xcode@0.6.2, elementtree@0.1.5, request@2.22.0, express@3.0.0, npm@1.3.24, plist@0.4.3, jshint@1.1.0, ripple-emulator@0.9.18, plugman@0.17.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a test phonegap application to work through any issues, where test1 is the directory that the app is created in,
uk.co.spiraltechnology.test and LocationTest is the name of the app.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;phonegap create test1 uk.co.spiraltechnology.test LocationTest&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the app is created we can try and compile it for ios.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; test1
phonegap build ios&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all goes well you will see&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[phonegap] detecting iOS SDK environment...
[phonegap] using the local environment
[phonegap] adding the iOS platform...
[phonegap] compiling iOS...
[phonegap] successfully compiled iOS app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s now possible to run code on the iphone emulator bundled with xcode.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;phonegap run ios --emulator&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src='launching-on-ios-simulator.png' style='width: 250px;' /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order to run the application on the iphone you need to either sign up for the &lt;a href=&quot;https://developer.apple.com/programs/ios/&quot;&gt;Apple Developer Program&lt;/a&gt;
or &lt;a href=&quot;http://www.iclarified.com/jailbreak/&quot;&gt;Jailbreak&lt;/a&gt; your idevice and .&lt;/p&gt;
&lt;p&gt;Assuming you are going for the second option we need to create a self signed certificate that xcode can sign the
code with when constructing the ipa file for the iphone, and we need to make the iphone allow applications to be installed
that have unofficial (self signed) certificates.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing AppSync for iOS 7, to allow our unsigned application to run.
On the jailbroken iDevice, launch the Cydia application and press Manage, then Sources.&lt;/p&gt;
&lt;p&gt;&lt;img src='cydia-packages.png' alt='cydia package manager' style='width: 250px;' /&gt;&lt;/p&gt;
&lt;p&gt;Next press Edit, and Add, type in the following Cydia/APT URL &lt;em&gt;cydia.iphonecake.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src='cydia-add-source.png' alt='cydia manage sources' style='width: 250px;' /&gt;&lt;/p&gt;
&lt;p&gt;The iphone will warn that the repository facilitates piracy. This is because the application we are about to install
allows the iphone to run unsigned code (such as the code we are about to write, and also pirated software).&lt;/p&gt;
&lt;p&gt;Once the iphonecake source has been added, press the search icon in the bottom right hand corner and at the top of the screen type AppSync&lt;/p&gt;
&lt;p&gt;&lt;img src='cydia-appsync.png' alt='search for AppSync' style='width: 250px;' /&gt;&lt;/p&gt;
&lt;p&gt;Select the relevant one for your version of iOS (in this case the latest is for iOS 7) and install it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next we need to set up XCode to apply a self signed certificate to the code. Open the Keychain Access application&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Select Keychain Access &amp;gt; Certificate Assistant &amp;gt; Create A Certificate …&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the first page fill in the following&lt;/p&gt;
&lt;p&gt;Name: iPhone Developer
Identify Type: Self Signed Root
Certification Type: Code Signing
Select “Let me override defaults” and press continue, it will say “You are about to create a self-signed certificate.”&lt;/p&gt;
&lt;p&gt;  &lt;img src='self-signed-iphone-certificate.png' alt='Keychain self signed certificate' style='width: 450px;' /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the second page fill in the following
Serial number: 1
Validity period : 3650&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the third page remove your email address.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Keep pressing continue until you reach the Specify location page, press create.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;We need to update XCode to use the new certificate.  The following directories are for Xcode 5.02.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Back up Xcodes plist file and convert it to xml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; cp -p Info.plist Info.plist.orig
&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; plutil -convert xml1 ./Info.plist&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace each occurrence of CiPhoneOSCodeSignContext with XCCodeSignContext in Info.plist&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; sed -i .bkup &lt;span class=&quot;string&quot;&gt;'s/XCiPhoneOSCodeSignContext/XCCodeSignContext/g'&lt;/span&gt; ./Info.plist&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Check it’s working&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;phonegap install ios&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will be asked if you want to allow codesign to have access to the iPhone Developer key in your keychain, say Always Allow
and the app should be push onto the iphone.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>Pointing 123-reg hosted domain to GitHub pages</title>
      <link>http://www.spiraltechnology.co.uk/articles/123-reg-to-github-pages/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://www.spiraltechnology.co.uk/articles/123-reg-to-github-pages/</guid>
      <author></author>
      <description>&lt;p&gt;After &lt;a href=&quot;http://www.spiraltechnology.co.uk/articles/building-static-blog/index.html&quot;&gt;building&lt;/a&gt; this blog statically and pushing it up to GitHub as a project page,
I then wanted to point my domain at it.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;My intention is to point the www subdomain of spiraltechnology.co.uk at my static website hosted by GitHub at &lt;a href=&quot;http://davidtron.github.io/&quot;&gt;&lt;a href=&quot;http://davidtron.github.io&quot;&gt;http://davidtron.github.io&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the root of my website create a file called &lt;a href=&quot;https://github.com/davidtron/spiraltechnology-website/blob/master/contents/CNAME&quot;&gt;CNAME&lt;/a&gt; and put the name of my subdomain in it &lt;em&gt;www.spiraltechnology.co.uk&lt;/em&gt;.
Since my site is generated by wintersmith, I needed to drop the file into the contents directory before generating the site.
This is then generated by wintersmith into my deployment directory and pushed to my GitHub userpage repository&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/dev/spiraltechnology-website
wintersmith build
&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/dev/spiraltechnology-website-deploy
git add CNAME
git commit &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt; -m &lt;span class=&quot;string&quot;&gt;&quot;Adding the CNAME for custom domain&quot;&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next step is to configure my DNS so that any requests for www.spiraltechnology.co.uk point to my GitHub user page.
The help pages at &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-pages&quot;&gt;GitHub &lt;/a&gt; suggest that this is done using a CNAME entry at your domain provider.
My domain is hosted with &lt;a href=&quot;http://123-reg.co.uk/&quot;&gt;123-reg&lt;/a&gt; and it’s relatively straightforward to update DNS entries for domains you own.
Log on to 123 and you will be presented with your control panel&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.spiraltechnology.co.uk/articles/123-reg-to-github-pages/123-control-panel.png&quot; alt=&quot;123 reg control panel&quot;&gt;&lt;/p&gt;
&lt;p&gt;Find the domain you want to manage from the drop down and select ‘Manage’&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.spiraltechnology.co.uk/articles/123-reg-to-github-pages/123-domain-options.png&quot; alt=&quot;123 domain controls&quot;&gt;&lt;/p&gt;
&lt;p&gt;Under the Advance domain settings, select ‘Manage DNS’&lt;/p&gt;
&lt;p&gt;&lt;img src='added-cname-for-www-to-github.png' style='width: 590px;' /&gt;&lt;/p&gt;
&lt;p&gt;Finally add an entry for www as a CNAME pointing to the GitHub userpage (davidtron.github.io)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>Static html blog</title>
      <link>http://www.spiraltechnology.co.uk/articles/building-static-blog/</link>
      <pubDate>Fri, 10 Jan 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="true">http://www.spiraltechnology.co.uk/articles/building-static-blog/</guid>
      <author></author>
      <description>&lt;p&gt;After 2 years of inactivity, I decided to resurrect my blog as a place to store technical snippets.  Previously I wrote my blog using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, but did not get on with Ruby and constant Gem updates, so am giving &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt; a try, it’s built on top of node.js, easy to install and under active development.&lt;/p&gt;
&lt;p&gt;Last time I ground to a halt because my laptop was stolen before I backed up the code anywhere, so I’ll be pushing the source to GitHub and trying out their user pages for hosting.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install node.js I chose to &lt;a href=&quot;http://nodejs.org/download/&quot;&gt;download&lt;/a&gt; the package and install it, but it’s available on  brew as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&quot;https://github.com/jnordberg/wintersmith#quick-start&quot;&gt;wintersmith&lt;/a&gt; using npm.  The -g option makes it globally available.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sudo&lt;/span&gt; npm install wintersmith -g&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As I had decided that I be wanted to store the source of the website and host the output on GitHub, I needed to create a repository to show my user pages and a repository to store the source code of the website. &lt;/p&gt;
&lt;p&gt; The user pages are created in the format &lt;em&gt;username.github.io&lt;/em&gt; so in my case I created a public repository named davidtron.github.io 
 &lt;img src=&quot;http://www.spiraltechnology.co.uk/articles/building-static-blog/create-user-repo.png&quot; alt=&quot;creating new deployment repository&quot;&gt;&lt;/p&gt;
&lt;p&gt; I then created another repository for the sourcecode called spiraltechnology-website&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open a terminal and check out the empty repository, in my case into my dev directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/dev
git clone https://github.com/davidtron/spiraltechnology-website&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new website, by default wintersmith will create you a basic blog structure with a plugin to render blog articles and an rss feed.  It complains if the directory exists, but in this case I want to populate the directory of my empty spiraltechnology-website repo, so I used the —force flag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;wintersmith new spiraltechnology-website --force
&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; spiraltechnology-website
wintersmith preview&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first problem I had was &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;template archive.jade: /Users/david/dev/spiraltechnology-website/
templates/layout.jade: &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;| !!! &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like the version in npm is not yet up to date with the version on github.  To fix follow it’s advice and &lt;em&gt;replace !!! 5&lt;/em&gt; with &lt;em&gt;doctype html&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;nano -w /Users/david/dev/spiraltechnology-website/templates/layout.jade&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done you can view the site in a browser on localhost:8080&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After creating some content and tweaking the layout and css, I added my files, commited them to my local repo then pushed the changes up to github.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/dev/spiraltechnology-website-deploy
git add *
git commit &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt; -m &lt;span class=&quot;string&quot;&gt;&quot;First pages commit. WIP&quot;&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once happy with the site, you need to configure wintersmith to build the flat files to a local directory and the contents on this directory needs to be &lt;a href=&quot;http://pages.github.com/&quot;&gt;published to the username.github.io repository&lt;/a&gt; we created earlier.&lt;/p&gt;
&lt;p&gt;Checkout the empty repository&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/dev
git clone https://github.com/davidtron/davidtron.github.io.git spiraltechnology-website-deploy
&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; spiraltechnology-website-deploy
git checkout master&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure wintersmith to build to the deploy directory. This is controlled by adding an output option to config.json in the root of the directory wintersmith created for us.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
  &lt;span class=&quot;string&quot;&gt;&quot;locals&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://www.spiraltechnology.co.uk&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;spiraltechnology&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;owner&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;David&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;simple, pragmatic, elegant code&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;string&quot;&gt;&quot;output&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;../spiraltechnology-website-deploy&quot;&lt;/span&gt;
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the source directory compile the website, it should output it into the newly created deployment directory&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/dev/spiraltechnology-website
wintersmith build&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the files in the github pages branch and push it up to the server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/dev/spiraltechnology-website-deploy
git add *
git commit &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt; -m &lt;span class=&quot;string&quot;&gt;&quot;First pages commit.&quot;&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check that it’s published after a few minutes at &lt;a href=&quot;http://davidtron.github.io&quot;&gt;http://davidtron.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
  </channel>
</rss>